generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id               String        @id @default(uuid())
  name             String
  last_name        String
  email            String        @unique
  password         String
  phone_number     String?
  profile_picture  String?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  active           Boolean       @default(true)
  is_driver        Boolean       @default(false)
  average_rating   Float?
  savedAddresses   Address[]     @relation("UserSavedAddresses")
  ReviewsWritten   Review[]      @relation("Reviewer")
  ReviewsReceived  Review[]      @relation("Reviewee")
  RidesDriven      Ride[]        @relation("Driver")
  ReservationsMade Reservation[] @relation("Passenger")
  VehiclesOwned    Vehicle[]
  MessagesSent     Message[]     @relation("MessagesSent")
  MessagesReceived Message[]     @relation("MessagesReceived")
  Token            Token[]
}

model Address {
  id               String   @id @default(uuid())
  latitude         Float
  longitude        Float
  city             String
  formattedAddress String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  deleted          Boolean  @default(false)
  user             User?    @relation("UserSavedAddresses", fields: [userId], references: [id])
  userId           String?
  ridesAsStart     Ride[]   @relation("RideStartAddress")
  ridesAsEnd       Ride[]   @relation("RideEndAddress")
}

model Ride {
  ride_id          String        @id @default(uuid())
  driver_id        String
  vehicle_id       String
  start_address_id String
  end_address_id   String
  start_time       DateTime
  end_time         DateTime?
  price            Decimal       @db.Decimal(10, 2)
  available_seats  Int
  preferences      String
  status           RideStatus
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  Driver           User          @relation(fields: [driver_id], references: [id], name: "Driver")
  Vehicle          Vehicle       @relation(fields: [vehicle_id], references: [vehicle_id])
  StartAddress     Address       @relation("RideStartAddress", fields: [start_address_id], references: [id])
  EndAddress       Address       @relation("RideEndAddress", fields: [end_address_id], references: [id])
  Reviews          Review[]
  Reservations     Reservation[]
  Messages         Message[]
}

model Reservation {
  reservation_id String            @id @default(uuid())
  ride_id        String
  passenger_id   String
  status         ReservationStatus
  payment_status PaymentStatus
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  Ride           Ride              @relation(fields: [ride_id], references: [ride_id])
  Passenger      User              @relation(fields: [passenger_id], references: [id], name: "Passenger")
}

model Review {
  review_id   String   @id @default(uuid())
  ride_id     String
  reviewer_id String
  reviewee_id String
  rating      Int
  comment     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Ride        Ride     @relation(fields: [ride_id], references: [ride_id])
  Reviewer    User     @relation("Reviewer", fields: [reviewer_id], references: [id])
  Reviewee    User     @relation("Reviewee", fields: [reviewee_id], references: [id])
}

model Vehicle {
  vehicle_id    String   @id @default(uuid())
  owner_id      String
  brand         String   @db.VarChar(50)
  model         String   @db.VarChar(50)
  active        Boolean  @default(true)
  year          Int
  license_plate String   @unique @db.VarChar(7)
  color         String   @db.VarChar(30)
  seats         Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  Owner         User     @relation(fields: [owner_id], references: [id])
  Rides         Ride[]
}

model Message {
  message_id  String   @id @default(uuid())
  sender_id   String
  receiver_id String
  ride_id     String?
  content     String   @db.VarChar(500)
  createdAt   DateTime @default(now())
  Sender      User     @relation("MessagesSent", fields: [sender_id], references: [id])
  Receiver    User     @relation("MessagesReceived", fields: [receiver_id], references: [id])
  Ride        Ride?    @relation(fields: [ride_id], references: [ride_id])
}

model Token {
  id        String   @id @default(uuid())
  token     String   @unique @db.VarChar(512)
  userId    String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model PasswordResetToken {
  email           String   @id
  resetCode       String
  createdAt       DateTime @default(now())
  expiresAt       DateTime
  attempts        Int      @default(0)
  lastEmailSentAt DateTime
}

enum RideStatus {
  SCHEDULED   @map("SCHEDULED")
  IN_PROGRESS @map("IN_PROGRESS")
  COMPLETED   @map("COMPLETED")
  CANCELLED   @map("CANCELLED")
}

enum ReservationStatus {
  PENDING   @map("PENDING")
  CONFIRMED @map("CONFIRMED")
  CANCELLED @map("CANCELLED")
}

enum PaymentStatus {
  PENDING  @map("PENDING")
  PAID     @map("PAID")
  REFUNDED @map("REFUNDED")
  FAILED   @map("FAILED")
}
